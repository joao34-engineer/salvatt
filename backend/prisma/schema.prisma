// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file for an e-commerce site,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String   @unique
  password  String
  name      String?
  role      Role     @default(CUSTOMER)

  // Relations
  orders    Order[]
  cart      Cart?
  reviews   Review[]
}

model Product {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  name        String
  description String?
  price       Float
  imageUrl    String?
  stock       Int      @default(0)
  categoryId  String

  // Relations
  category    Category @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String   @unique
  products  Product[]
}

model Order {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  total     Float
  status    OrderStatus @default(PENDING)
  userId    String

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        String @id @default(uuid())
  quantity  Int
  price     Float // Price at time of order

  orderId   String
  productId String

  // Relations
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model Cart {
  id        String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String @unique

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String @id @default(uuid())
  quantity  Int    @default(1)

  cartId    String
  productId String

  // Relations
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Review {
  id        String @id @default(uuid())
  createdAt DateTime @default(now())

  rating    Int // 1-5
  comment   String?

  userId    String
  productId String

  // Relations
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}